//A dummy weapon used to "holster" our current weapon
class SlotsHolster : Weapon
{
    Name lastWeapon;
	bool setCrosshair;

    void SetLastWeapon(Name weapon)
    {
        lastWeapon = weapon;
    }

    Name GetLastWeapon()
    {
        return lastWeapon;
    }

    action void A_ConditionalCrosshair(int num)
    {
		A_ResetCrosshair();
        if (slots_holster_hide_crosshair)
		{
			invoker.setCrosshair = true;
            A_SetCrosshair(num);
		}
    }
	
	//Do this this way, so that if someone changes the crosshair setting while holstered,
	//we make sure to reset it at the end, so we can't just use A_ConditionalCrosshair when deselecting
	action void A_ResetCrosshair()
	{
		if (invoker.setCrosshair)
		{
			invoker.setCrosshair = false;
            A_SetCrosshair(0);
		}
	}

    Default
    {
        +WEAPON.WIMPY_WEAPON
        +WEAPON.NOALERT
        +WEAPON.NOAUTOFIRE
        +WEAPON.NO_AUTO_SWITCH
        +WEAPON.CHEATNOTWEAPON
        +WEAPON.NODEATHINPUT
        +WEAPON.NODEATHDESELECT
        +INVENTORY.UNDROPPABLE
        +INVENTORY.ALWAYSPICKUP
        +INVENTORY.HUBPOWER
        +INVENTORY.PERSISTENTPOWER
        +INVENTORY.UNTOSSABLE
        +INVENTORY.IGNORESKILL
    }
    States
    {
        Ready:
            TNT1 A 1 A_WeaponReady;
            TNT1 A 1 A_ConditionalCrosshair(5);
            Loop;
        Select:
            TNT1 A 1 A_ConditionalCrosshair(5);
            TNT1 AAAAAAAAA 1 A_Raise;
            Loop;
        Deselect:
            TNT1 AAAAAAAAA 1 A_Lower;
            TNT1 A 1 A_ResetCrosshair;
            Loop;
        Fire:
        AltFire:
            TNT1 A 1 A_SelectWeapon(invoker.lastWeapon);
            Goto Ready;
    }
}
